=begin
#Browse API

#<p>The Browse API has the following resources:</p>   <ul> <li><b>item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters.</li>  <li> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#API\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <b>search_by_image: </b> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size.</li> <li>Lets you check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b>Trading</b> and <b>Finding</b>, and the RESTful APIs, such as <b>Browse</b>, which use different formats for the item IDs enabling you to retrieve the details of the item and the RESTful item ID using a legacy item ID.</li>  </ul> </li>  <li><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#API\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <b>shopping_cart: </b> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b>Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b>shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

The version of the OpenAPI document: v1_beta.20.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.2

=end

require 'date'

module BuyBrowseApiClient
  # The type that defines the item details for a specific item.
  class ItemSummary
    # An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the image.imageUrl field.
    attr_accessor :additional_images

    # This indicates if the item is for adults only. For more information about adult-only items on eBay, see Adult items policy for sellers and Adult-Only items on eBay for buyers.
    attr_accessor :adult_only

    # This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction items.
    attr_accessor :bid_count

    # A comma separated list of the purchase options available for the item, such as FIXED_PRICE, AUCTION. FIXED_PRICE - Returned for fixed-price items (non-auction) AUCTION - Returned for auction items without Buy It Now feature FIXED_PRICE and AUCTION - Returned for auction items enabled with the Buy It Now feature Code so that your app gracefully handles any future changes to this list.
    attr_accessor :buying_options

    # This container returns the primary category ID of the item (as well as the secondary category if the item was listed in two categories).
    attr_accessor :categories

    # The text describing the condition of the item, such as New or Used. For a list of condition names, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list.
    attr_accessor :condition

    # The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see Item Condition IDs and Names. Code so that your app gracefully handles any future changes to this list.
    attr_accessor :condition_id

    attr_accessor :current_bid_price

    attr_accessor :distance_from_pickup_location

    # This indicates the energy efficiency rating of the item. Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. Currently, this field is only applicable for the Germany site, and is only returned if the seller specified the energy efficiency rating through item specifics at listing time. Rating values include A+++, A++, A+, A, B, C, D, E, F, and G.
    attr_accessor :energy_efficiency_class

    # An ePID is the eBay product identifier of a product from the eBay product catalog. This indicates the product in which the item belongs.
    attr_accessor :epid

    attr_accessor :image

    # The URL to the View Item page of the item, which includes the affiliate tracking ID. This field is only returned if the seller enables affiliate tracking for the item by including the X-EBAY-C-ENDUSERCTX request header in the method.
    attr_accessor :item_affiliate_web_url

    # The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Note: This field is returned only for item groups.
    attr_accessor :item_group_href

    # The indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. Currently only SELLER_DEFINED_VARIATIONS is supported and indicates this is an item group created by the seller. Note: This field is returned only for item groups. Code so that your app gracefully handles any future changes to this list.
    attr_accessor :item_group_type

    # The URI for the Browse API getItem method, which can be used to retrieve more details about items in the search results.
    attr_accessor :item_href

    # The unique RESTful identifier of the item.
    attr_accessor :item_id

    attr_accessor :item_location

    # The URL to the View Item page of the item. This enables you to include a &quot;Report Item on eBay&quot; hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.
    attr_accessor :item_web_url

    attr_accessor :marketing_price

    # This container returns the local pickup options available to the buyer. This container is only returned if the user is searching for local pickup items and set the local pickup filters in the method request.
    attr_accessor :pickup_options

    attr_accessor :price

    attr_accessor :seller

    # This container returns the shipping options available to ship the item.
    attr_accessor :shipping_options

    # This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.). Sometimes the title doesn't give enough information but the description is too big. Surfacing the shortDescription can often provide buyers with the additional information that could help them make a buying decision. For example: &quot;title&quot;: &quot;Petrel U42W FPV Drone RC Quadcopter w/HD Camera Live Video One Key Off / Landing&quot;, &quot;shortDescription&quot;: &quot;1 U42W Quadcopter. Syma X5SW-V3 Wifi FPV RC Drone Quadcopter 2.4Ghz 6-Axis Gyro with Headless Mode. Syma X20 Pocket Drone 2.4Ghz Mini RC Quadcopter Headless Mode Altitude Hold. One Key Take Off / Landing function: allow beginner to easy to fly the drone without any skill.&quot;, Restriction: This field is returned by the search method only when fieldgroups = EXTENDED.
    attr_accessor :short_description

    # An array of thumbnail images for the item.
    attr_accessor :thumbnail_images

    # The seller-created title of the item. Maximum Length: 80 characters
    attr_accessor :title

    attr_accessor :unit_price

    # The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;
    attr_accessor :unit_pricing_measure

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additional_images' => :'additionalImages',
        :'adult_only' => :'adultOnly',
        :'bid_count' => :'bidCount',
        :'buying_options' => :'buyingOptions',
        :'categories' => :'categories',
        :'condition' => :'condition',
        :'condition_id' => :'conditionId',
        :'current_bid_price' => :'currentBidPrice',
        :'distance_from_pickup_location' => :'distanceFromPickupLocation',
        :'energy_efficiency_class' => :'energyEfficiencyClass',
        :'epid' => :'epid',
        :'image' => :'image',
        :'item_affiliate_web_url' => :'itemAffiliateWebUrl',
        :'item_group_href' => :'itemGroupHref',
        :'item_group_type' => :'itemGroupType',
        :'item_href' => :'itemHref',
        :'item_id' => :'itemId',
        :'item_location' => :'itemLocation',
        :'item_web_url' => :'itemWebUrl',
        :'marketing_price' => :'marketingPrice',
        :'pickup_options' => :'pickupOptions',
        :'price' => :'price',
        :'seller' => :'seller',
        :'shipping_options' => :'shippingOptions',
        :'short_description' => :'shortDescription',
        :'thumbnail_images' => :'thumbnailImages',
        :'title' => :'title',
        :'unit_price' => :'unitPrice',
        :'unit_pricing_measure' => :'unitPricingMeasure'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'additional_images' => :'Array<Image>',
        :'adult_only' => :'Boolean',
        :'bid_count' => :'Integer',
        :'buying_options' => :'Array<String>',
        :'categories' => :'Array<Category>',
        :'condition' => :'String',
        :'condition_id' => :'String',
        :'current_bid_price' => :'ConvertedAmount',
        :'distance_from_pickup_location' => :'TargetLocation',
        :'energy_efficiency_class' => :'String',
        :'epid' => :'String',
        :'image' => :'Image',
        :'item_affiliate_web_url' => :'String',
        :'item_group_href' => :'String',
        :'item_group_type' => :'String',
        :'item_href' => :'String',
        :'item_id' => :'String',
        :'item_location' => :'ItemLocationImpl',
        :'item_web_url' => :'String',
        :'marketing_price' => :'MarketingPrice',
        :'pickup_options' => :'Array<PickupOptionSummary>',
        :'price' => :'ConvertedAmount',
        :'seller' => :'Seller',
        :'shipping_options' => :'Array<ShippingOptionSummary>',
        :'short_description' => :'String',
        :'thumbnail_images' => :'Array<Image>',
        :'title' => :'String',
        :'unit_price' => :'ConvertedAmount',
        :'unit_pricing_measure' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ItemSummary` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ItemSummary`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'additional_images')
        if (value = attributes[:'additional_images']).is_a?(Array)
          self.additional_images = value
        end
      end

      if attributes.key?(:'adult_only')
        self.adult_only = attributes[:'adult_only']
      end

      if attributes.key?(:'bid_count')
        self.bid_count = attributes[:'bid_count']
      end

      if attributes.key?(:'buying_options')
        if (value = attributes[:'buying_options']).is_a?(Array)
          self.buying_options = value
        end
      end

      if attributes.key?(:'categories')
        if (value = attributes[:'categories']).is_a?(Array)
          self.categories = value
        end
      end

      if attributes.key?(:'condition')
        self.condition = attributes[:'condition']
      end

      if attributes.key?(:'condition_id')
        self.condition_id = attributes[:'condition_id']
      end

      if attributes.key?(:'current_bid_price')
        self.current_bid_price = attributes[:'current_bid_price']
      end

      if attributes.key?(:'distance_from_pickup_location')
        self.distance_from_pickup_location = attributes[:'distance_from_pickup_location']
      end

      if attributes.key?(:'energy_efficiency_class')
        self.energy_efficiency_class = attributes[:'energy_efficiency_class']
      end

      if attributes.key?(:'epid')
        self.epid = attributes[:'epid']
      end

      if attributes.key?(:'image')
        self.image = attributes[:'image']
      end

      if attributes.key?(:'item_affiliate_web_url')
        self.item_affiliate_web_url = attributes[:'item_affiliate_web_url']
      end

      if attributes.key?(:'item_group_href')
        self.item_group_href = attributes[:'item_group_href']
      end

      if attributes.key?(:'item_group_type')
        self.item_group_type = attributes[:'item_group_type']
      end

      if attributes.key?(:'item_href')
        self.item_href = attributes[:'item_href']
      end

      if attributes.key?(:'item_id')
        self.item_id = attributes[:'item_id']
      end

      if attributes.key?(:'item_location')
        self.item_location = attributes[:'item_location']
      end

      if attributes.key?(:'item_web_url')
        self.item_web_url = attributes[:'item_web_url']
      end

      if attributes.key?(:'marketing_price')
        self.marketing_price = attributes[:'marketing_price']
      end

      if attributes.key?(:'pickup_options')
        if (value = attributes[:'pickup_options']).is_a?(Array)
          self.pickup_options = value
        end
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'seller')
        self.seller = attributes[:'seller']
      end

      if attributes.key?(:'shipping_options')
        if (value = attributes[:'shipping_options']).is_a?(Array)
          self.shipping_options = value
        end
      end

      if attributes.key?(:'short_description')
        self.short_description = attributes[:'short_description']
      end

      if attributes.key?(:'thumbnail_images')
        if (value = attributes[:'thumbnail_images']).is_a?(Array)
          self.thumbnail_images = value
        end
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'unit_price')
        self.unit_price = attributes[:'unit_price']
      end

      if attributes.key?(:'unit_pricing_measure')
        self.unit_pricing_measure = attributes[:'unit_pricing_measure']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additional_images == o.additional_images &&
          adult_only == o.adult_only &&
          bid_count == o.bid_count &&
          buying_options == o.buying_options &&
          categories == o.categories &&
          condition == o.condition &&
          condition_id == o.condition_id &&
          current_bid_price == o.current_bid_price &&
          distance_from_pickup_location == o.distance_from_pickup_location &&
          energy_efficiency_class == o.energy_efficiency_class &&
          epid == o.epid &&
          image == o.image &&
          item_affiliate_web_url == o.item_affiliate_web_url &&
          item_group_href == o.item_group_href &&
          item_group_type == o.item_group_type &&
          item_href == o.item_href &&
          item_id == o.item_id &&
          item_location == o.item_location &&
          item_web_url == o.item_web_url &&
          marketing_price == o.marketing_price &&
          pickup_options == o.pickup_options &&
          price == o.price &&
          seller == o.seller &&
          shipping_options == o.shipping_options &&
          short_description == o.short_description &&
          thumbnail_images == o.thumbnail_images &&
          title == o.title &&
          unit_price == o.unit_price &&
          unit_pricing_measure == o.unit_pricing_measure
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [additional_images, adult_only, bid_count, buying_options, categories, condition, condition_id, current_bid_price, distance_from_pickup_location, energy_efficiency_class, epid, image, item_affiliate_web_url, item_group_href, item_group_type, item_href, item_id, item_location, item_web_url, marketing_price, pickup_options, price, seller, shipping_options, short_description, thumbnail_images, title, unit_price, unit_pricing_measure].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BuyBrowseApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
