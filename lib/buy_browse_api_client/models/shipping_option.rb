=begin
#Browse API

#<p>The Browse API has the following resources:</p>   <ul> <li><b>item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters.</li>  <li> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#API\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <b>search_by_image: </b> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size.</li> <li>Lets you check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b>Trading</b> and <b>Finding</b>, and the RESTful APIs, such as <b>Browse</b>, which use different formats for the item IDs enabling you to retrieve the details of the item and the RESTful item ID using a legacy item ID.</li>  </ul> </li>  <li><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#API\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <b>shopping_cart: </b> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b>Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b>shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

The version of the OpenAPI document: v1_beta.20.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.2

=end

require 'date'

module BuyBrowseApiClient
  # The type that defines the fields for the details of a shipping provider.
  class ShippingOption
    attr_accessor :additional_shipping_cost_per_unit

    # The deadline date that the item must be purchased by in order to be received by the buyer within the delivery window ( maxEstimatedDeliveryDate and minEstimatedDeliveryDate fields). This field is returned only for items that are eligible for 'Same Day Handling'. For these items, the value of this field is what is displayed in the Delivery line on the View Item page. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.
    attr_accessor :cut_off_date_used_for_estimate

    # The end date of the delivery window (latest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.
    attr_accessor :max_estimated_delivery_date

    # The start date of the delivery window (earliest projected delivery date). This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer. Note: For the best accuracy, always include the location of where the item is be shipped in the contextualLocation values of the X-EBAY-C-ENDUSERCTX request header.
    attr_accessor :min_estimated_delivery_date

    # The number of items used when calculating the estimation information.
    attr_accessor :quantity_used_for_estimate

    # A name of the shipping provider, such as FedEx, or USPS.
    attr_accessor :shipping_carrier_code

    attr_accessor :shipping_cost

    # Indicates the class of the shipping cost. Valid Values: FIXED or CALCULATED. Code so that your app gracefully handles any future changes to this list.
    attr_accessor :shipping_cost_type

    # The type of shipping service. For example, USPS First Class.
    attr_accessor :shipping_service_code

    attr_accessor :ship_to_location_used_for_estimate

    # Any trademark symbol, such as &trade; or &reg;, that needs to be shown in superscript next to the shipping service name.
    attr_accessor :trademark_symbol

    # The type of a shipping option, such as EXPEDITED, ONE_DAY, STANDARD, ECONOMY, PICKUP, etc.
    attr_accessor :type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additional_shipping_cost_per_unit' => :'additionalShippingCostPerUnit',
        :'cut_off_date_used_for_estimate' => :'cutOffDateUsedForEstimate',
        :'max_estimated_delivery_date' => :'maxEstimatedDeliveryDate',
        :'min_estimated_delivery_date' => :'minEstimatedDeliveryDate',
        :'quantity_used_for_estimate' => :'quantityUsedForEstimate',
        :'shipping_carrier_code' => :'shippingCarrierCode',
        :'shipping_cost' => :'shippingCost',
        :'shipping_cost_type' => :'shippingCostType',
        :'shipping_service_code' => :'shippingServiceCode',
        :'ship_to_location_used_for_estimate' => :'shipToLocationUsedForEstimate',
        :'trademark_symbol' => :'trademarkSymbol',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'additional_shipping_cost_per_unit' => :'ConvertedAmount',
        :'cut_off_date_used_for_estimate' => :'String',
        :'max_estimated_delivery_date' => :'String',
        :'min_estimated_delivery_date' => :'String',
        :'quantity_used_for_estimate' => :'Integer',
        :'shipping_carrier_code' => :'String',
        :'shipping_cost' => :'ConvertedAmount',
        :'shipping_cost_type' => :'String',
        :'shipping_service_code' => :'String',
        :'ship_to_location_used_for_estimate' => :'ShipToLocation',
        :'trademark_symbol' => :'String',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ShippingOption` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ShippingOption`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'additional_shipping_cost_per_unit')
        self.additional_shipping_cost_per_unit = attributes[:'additional_shipping_cost_per_unit']
      end

      if attributes.key?(:'cut_off_date_used_for_estimate')
        self.cut_off_date_used_for_estimate = attributes[:'cut_off_date_used_for_estimate']
      end

      if attributes.key?(:'max_estimated_delivery_date')
        self.max_estimated_delivery_date = attributes[:'max_estimated_delivery_date']
      end

      if attributes.key?(:'min_estimated_delivery_date')
        self.min_estimated_delivery_date = attributes[:'min_estimated_delivery_date']
      end

      if attributes.key?(:'quantity_used_for_estimate')
        self.quantity_used_for_estimate = attributes[:'quantity_used_for_estimate']
      end

      if attributes.key?(:'shipping_carrier_code')
        self.shipping_carrier_code = attributes[:'shipping_carrier_code']
      end

      if attributes.key?(:'shipping_cost')
        self.shipping_cost = attributes[:'shipping_cost']
      end

      if attributes.key?(:'shipping_cost_type')
        self.shipping_cost_type = attributes[:'shipping_cost_type']
      end

      if attributes.key?(:'shipping_service_code')
        self.shipping_service_code = attributes[:'shipping_service_code']
      end

      if attributes.key?(:'ship_to_location_used_for_estimate')
        self.ship_to_location_used_for_estimate = attributes[:'ship_to_location_used_for_estimate']
      end

      if attributes.key?(:'trademark_symbol')
        self.trademark_symbol = attributes[:'trademark_symbol']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additional_shipping_cost_per_unit == o.additional_shipping_cost_per_unit &&
          cut_off_date_used_for_estimate == o.cut_off_date_used_for_estimate &&
          max_estimated_delivery_date == o.max_estimated_delivery_date &&
          min_estimated_delivery_date == o.min_estimated_delivery_date &&
          quantity_used_for_estimate == o.quantity_used_for_estimate &&
          shipping_carrier_code == o.shipping_carrier_code &&
          shipping_cost == o.shipping_cost &&
          shipping_cost_type == o.shipping_cost_type &&
          shipping_service_code == o.shipping_service_code &&
          ship_to_location_used_for_estimate == o.ship_to_location_used_for_estimate &&
          trademark_symbol == o.trademark_symbol &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [additional_shipping_cost_per_unit, cut_off_date_used_for_estimate, max_estimated_delivery_date, min_estimated_delivery_date, quantity_used_for_estimate, shipping_carrier_code, shipping_cost, shipping_cost_type, shipping_service_code, ship_to_location_used_for_estimate, trademark_symbol, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BuyBrowseApiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
